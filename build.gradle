apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/javafx.gradle"

group = 'groupId'
version = '1.0-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

def javafxLib = "jfxrt.jar"

def getJavaFXPath(def javafxLib) {
    def javaHome = System.env["JAVA_HOME"]
    if (javaHome == null) {
        throw new RuntimeException("JAVA_HOME environment variable must be set")
    }
    def javafxrt = "jre" + File.separator + "lib" + File.separator + javafxLib
    return new File(javaHome, javafxrt).absolutePath
}

repositories {

     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile files(getJavaFXPath(javafxLib))
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    //Compiliert Submodule
    compile project(':streamchecker')
    compile project(':javalivestreamerwrapper')
}



jar {

//    manifest {
//        attributes(
//                'Main-Class': 'com.github.fozruk.streamcheckerguitest.Main',
//                'Class-Path': 'com.github.fozruk.streamcheckerguitest'
//        )
//    }
    //Includiert alle Dependencies http://stackoverflow.com/questions/4871656/using-gradle-to-build-a-jar-with-dependencies
    //from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }

    // When creating a fat JAR, make sure we exclude javafx runtime
    // from the fat JAR
    dependsOn configurations.runtime
    from {
        configurations.runtime.findAll { !it.name.contains(javafxLib) }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allJava

    // There's no need to explicitly specify the -classpath or -cp
    // since the classpath information is already stored in the MANIFEST.MF
    manifest {
        attributes(
                'Main-Class': 'com.github.fozruk.streamcheckerguitest.Main',
                'Class-Path': 'com.github.fozruk.streamcheckerguitest'
        )
    }
}
